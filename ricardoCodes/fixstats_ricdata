#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Sep 13 20:29:44 2020

@author: bcbirkel
"""


# add station info to Ricardo's data


from obspy import read, read_inventory
from obspy.signal.filter import bandpass
import pandas as pd
from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt
import numpy as np
from obspy.signal.invsim import simulate_seismometer, corn_freq_2_paz
from obspy.geodetics import gps2dist_azimuth
from obspy.io.sac import sacpz
from obspy.io.sac import attach_paz
from obspy.io.gse2.paz import read_paz
import os
from obspy.core import Trace, Stream, AttribDict

#Ignore warnings due to python 2 and 3 conflict
import warnings
warnings.filterwarnings("ignore")


# %% Set parameters
#set event
event_no = 4

events = ['lahabra_2014', 'beverlyhills_2001', 'chatsworth_2007', 'chinohills_2008', 'inglewood_2009']
event = events[event_no]

# plotting params
plotsyn = False
ymin = 0
ymax = 100
xmin = 0
xmax = 80

#set corners for map
llcrnrlon=-119
llcrnrlat=33.25
urcrnrlon=-117
urcrnrlat=34.75

#set bandpass frequencies
high_freq = 1/2
low_freq = 1/10

#set gains
# gain = 200
# sy_gain = 100

gain = 10
sy_gain = 10

    
if event_no == 0:
    event_title = 'lahabra'
    event_lat = 33.9325
    event_lon = -117.9158
elif event_no == 3:
    event_title = 'chinohills'
    event_lat = 33.9465
    event_lon = -117.7667
elif event_no == 4:
    event_title = 'inglewood'
    event_lat = 33.9377
    event_lon = -118.3357
elif event_no == 2:
    event_title = 'chatsworth'
    event_lat = 34.2983
    event_lon = -118.6255
elif event_no == 1:
    event_title = 'beverlyhills'
    event_lat = 34.0541
    event_lon = -118.3929
else: 
    print('unknown event file')
    
#%% event info

evla = event_lat
evlo = event_lon


# %% Set paths
#set directories
path_dir_data = '/Users/bcbirkel/Documents/GitHub/LABasin/CompiledEvents/' + event + '/allData/'
os.chdir(path_dir_data)

#read in files
stream_dataN = read(path_dir_data + "*N.SAC")
stream_dataE = read(path_dir_data + "*E.SAC") 
stream_dataZ = read(path_dir_data + "*Z.SAC") 
stream_dataR = read(path_dir_data + "*R.SAC") 
stream_dataT = read(path_dir_data + "*T.SAC") 

for tr in stream_dataN:
    cmp = "N"
    tr.stats.channel = "BH" + cmp
    tr.stats.sac.kcmpnm = "BH" + cmp
for tr in stream_dataE:
    cmp = "E"
    tr.stats.channel = "BH" + cmp
    tr.stats.sac.kcmpnm = "BH" + cmp
for tr in stream_dataZ:
    cmp = "Z"
    tr.stats.channel = "BH" + cmp
    tr.stats.sac.kcmpnm = "BH" + cmp
for tr in stream_dataR:
    cmp = "R"
    tr.stats.channel = "BH" + cmp
    tr.stats.sac.kcmpnm = "BH" + cmp
for tr in stream_dataT:
    cmp = "T"
    tr.stats.channel = "BH" + cmp
    tr.stats.sac.kcmpnm = "BH" + cmp
stream_data = stream_dataN + stream_dataE + stream_dataZ + stream_dataR + stream_dataT


#%% Open station location file
sta_file = '/Users/bcbirkel/Documents/GitHub/LABasin/VidaleCodes/stations.txt'
file_st = open(sta_file, 'r')
line = file_st.readline()      # read first line to skip header information
lines = file_st.readlines()
# print(str(len(lines)) + ' stations read from ' + sta_file)

# Load station coords into arrays, many more stations than used
st_num   = []
st_netw  = []
st_name  = []
st_dist  = []
st_az    = []
st_baz   = []
st_lat   = []
st_lon   = []
for line in lines:
    split_line = line.split()
    st_num.append( split_line[0])
    st_netw.append(split_line[2])
    st_name.append(split_line[3])
    st_lat.append( split_line[4])
    st_lon.append( split_line[5])
print('number of stations in list is ' + str(len(st_num)))

for ii in range(len(st_name)):
    st = st_name[ii]
    #print(st)
    for tr in stream_data:
        if tr.stats.station == st:
            tr.stats.sac.stla = float(st_lat[ii])
            tr.stats.sac.stlo = float(st_lon[ii])
            tr.stats.sac.evla = evla
            tr.stats.sac.evlo = evlo
            print(st)
            print(tr.stats.sac.stla)
            tr.write(tr.id + ".SAC", format="SAC")
    
            