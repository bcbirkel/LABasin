#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Mar  8 13:25:12 2021

@author: bcbirkel
"""

# %% IMPORT STATEMENTS
from obspy import read, UTCDateTime
import matplotlib.pyplot as plt
import numpy as np
from obspy.geodetics import gps2dist_azimuth
import os
from obspy.core import Trace, Stream, AttribDict
import obspy.signal.filter as flt
import math
import struct
from timeit import default_timer as timer 
from obspy.geodetics.base import gps2dist_azimuth
import scipy.io

#Ignore warnings due to python2 and 3 conflict
import warnings
warnings.filterwarnings("ignore")

from obspy import read, read_inventory
from obspy.signal.filter import bandpass
from mpl_toolkits.basemap import Basemap



# %% SET TOGGLE PARAMETERS
syn_exist = False
plotsyn = True
plot_azimuth = False
bpass = True
plot_spec_st = False
select_stns = False
skip_stns = True; skip = 1
CI_only = False
CE_only = False
plotnames = True

event_no = 3

snr = 1

# plotting params
ymin = 0
ymax = 42
xmin = 0
xmax = 80

#set corners for map
llcrnrlon=-119
llcrnrlat=33.25 #- 0.25
urcrnrlon=-117
urcrnrlat=34.75 #+ 0.25

# #smaller map:
# llcrnrlon=-118.5
# llcrnrlat=33.5
# urcrnrlon=-117.5
# urcrnrlat=34.25

#set bandpass frequencies
high_freq = 1/2
low_freq = 1/10 

# %% ##### VARIABLE DEFINITION #####
replot_only = False #only True if just plotting again with different plotting params
writenew = False  
rewriteTS = False #always False unless need to write over timeslice files, if files don't exist, toggles later
alldata = False
plotdata = True
plotJSsyn = False
compareNN = False
plotDifference = False
grid_only = False

filt = True
zerophase = False
lowpass = 2 #seconds
highpass = 3 #seconds

time_start = 0
time_end = 60 # seconds
time_pts = int(time_end / 0.05) # number of slices (based on time step of dt = 0.05 s)
maxdist = 0.3 # maxiumum possible distance between two corresponding points
max2event = 30 # max distance from the event to plot (in km)
JStimeshift = 0.6
padding = 0.6 #seconds added to pad binary file

event_no = 0

# choose model for comparison ('si' = CVM-S4.26, 'h' = CVM-H)
mod = "si" 
#mod = 'h'

events = ['lahabra_2014', 'beverlyhills_2001', 'chatsworth_2007', 'chinohills_2008', 'inglewood_2009', 'elmonte_2020']
event = events[event_no] 

#sta_ignore = ['23525','14241','24157','638']
sta_ignore = []

# %% ##### SET EVENT PARAMS #####
if event_no == 0:
    event_title = 'lahabra'
    event_disp = 'La Habra 2014'
    eventFol = "epw_102_m5.09-3.5x3.5-s266318098_cvm" + mod + "-vs500_sc01-h0.100"
    event_time = "2014-03-29T04:09:42"
    event_lat = 33.9325
    event_lon = -117.9158
    gain = lowpass/2+max2event/20
    maxdist = 0.2
elif event_no == 1:
    event_title = 'beverlyhills'
    event_disp = 'Beverly Hills 2001'
    eventFol = "e1036_m4.24-1.3x1.3-s1098915986_cvm" + mod + "-vs500_sc01-h0.100"
    event_time = "2001-09-09T23:59:17"
    event_lat = 34.0541
    event_lon = -118.3929
    gain = lowpass*30+max2event
elif event_no == 2:
    event_title = 'chatsworth'
    event_disp = 'Chatsworth 2007'
    eventFol = "e1019_m4.66-2.1x2.1-s60148050_cvm" + mod + "-vs500_sc01-h0.100"
    event_time = "2007-08-09T07:58:49"
    event_lat = 34.2983
    event_lon = -118.6255
    gain = lowpass/2+max2event/2
    maxdist = 0.8
elif event_no == 3:
    event_title = 'chinohills'
    event_disp = 'Chino Hills 2008'
    eventFol = "e1002_m5.39-5.0x5.0-s650146834_cvm" + mod + "-vs500_sc01-h0.100"
    event_time = "2008-07-29T18:42:15"
    event_lat = 33.9465
    event_lon = -117.7667
    gain = lowpass/2+max2event/20
    if lowpass == 5:
        gain = lowpass/2+max2event/2
    maxdist = 0.2
elif event_no == 4:
    event_title = 'inglewood'
    event_disp = 'Inglewood 2009'
    eventFol = "e1011_m4.70-2.2x2.2-s1247256210_cvm" + mod + "-vs500_sc01-h0.100"
    event_time = "2009-05-18T03:39:36"
    event_lat = 33.9377
    event_lon = -118.3357
    gain = lowpass/2+max2event/2
    maxdist = 0.2
elif event_no == 5:
    event_title = 'elmonte'
    event_disp = 'El Monte 2020'
    event_lat = 34.0385
    event_lon = -118.0803
    gain_data = 5
    sy_gain = 20
    gain = 20
else: 
    print("pick appropriate event number")
    
    print("looking at " + event_disp)
    
#fileName = "/Users/bcbirkel/Documents/GitHub/LABasin/GravesSim_fullgrid_tsfiles/" + eventFol + "/OutBin/sc01_xyts.e3d"

all_events = [[33.9325,-117.9158],[34.0541,-118.3929],[34.2983,-118.6255],[33.9465,-117.7667],[33.9377,-118.3357]]
new_events = [[34.03,-118.08],[33.98,-118.34],[33.86,-117.72],[34.13,-117.77],[34.08,-118.47],[33.99,-118.36],[34.09,-118.49],[34.13,-118.48],[33.82,-117.68]]

dataPath = '/Users/bcbirkel/Documents/GitHub/LABasin/CompiledEvents/' + event + '/allData/fixed/' 
synPath = path_dir_syn = '/Users/bcbirkel/Documents/GitHub/LABasin/CompiledEvents/' + event + '/GravesSyn/CVM-S4/fixed/'
    

# %% ##### OPEN STATION MASTER FILE FOR TRANSFORMATION #####
file = open("/Users/bcbirkel/Documents/GitHub/LABasin/all_stationmaster.txt", "r")
if not "transf" in locals():
    transf = file.readlines()
    transf = transf[2::] # strip header
    
    # initialize vars
    net = ()
    code = ()
    stlat = ()
    stlon = ()
    simx = ()
    simy = ()
    simlat = ()
    simlon = ()
    ind = ()
    ind2 = ()
    ind3 = ()
    ind4 = ()
    dist = ()
    dist2 = ()
    dist3 = ()
    dist4 = ()
    ev_dist = ()
    ev_az = ()
    
    # split lines into information, store in vars
    for line in transf:
        #a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p = line.split()
        a,b,c,d = line.split()
        net = net + (a,)
        code = code + (b,)
        stlat = stlat + (float(c),)
        stlon = stlon + (float(d),)
        # simx = simx + (int(e),)
        # simy = simy + (int(f),)
        # simlat = simlat + (float(g),)
        # simlon = simlon + (float(h),)
        # ind = ind + (int(i),)
        # ind2 = ind2 + (int(j),)
        # ind3 = ind3 + (int(k),)
        # ind4 = ind4 + (int(l),)
        # dist = dist + (float(m),)
        # dist2 = dist + (float(n),)
        # dist3 = dist + (float(o),)
        # dist4 = dist + (float(p),)
        # evd = gps2dist_azimuth(event_lat,event_lon,float(g),float(h))
        # ev_dist = ev_dist + (evd[0]/1000,)
        # ev_az = ev_az + (evd[1],)
        
        
# %% PLOT STATIONS AND EVENT ON MAP

#f = plt.figure(figsize=(10,5))
# setup mercator map projection.
m = Basemap(projection='merc',llcrnrlon=llcrnrlon, llcrnrlat=llcrnrlat, urcrnrlon=urcrnrlon, urcrnrlat=urcrnrlat,epsg=4269) #http://server.arcgisonline.com/arcgis/rest/services; EPSG Number of America is 4269
m.arcgisimage(service='ESRI_Imagery_World_2D', xpixels = 2000, verbose= True)
basin_st = []

# plot stations
for i in range(len(stlat)):
    if net[i] == "CE":
        xx,yy = m(stlon[i],stlat[i])
        m.scatter(xx, yy, marker = "^" ,s=30, c="g" , edgecolors = "k", alpha = 1, label = "Data")
    elif net[i] == "CI":
        xx,yy = m(stlon[i],stlat[i])
        m.scatter(xx, yy, marker = "^" ,s=30, c="b" , edgecolors = "k", alpha = 1, label = "Data")
    else:
        xx,yy = m(stlon[i],stlat[i])
        m.scatter(xx, yy, marker = "^" ,s=30, c="y" , edgecolors = "k", alpha = 1, label = "Data")
       # plt.text(xx+.025,yy-0.01, code[i], fontsize=8)
    # if llcrnrlat < stlat < urcrnrlat and llcrnrlon < stlon < urcrnrlon:
    #     basin_st.append(tr.stats.sac.kstnm)
    # else:
    #     stlat = tr.stats.sac.stla; stlon = tr.stats.sac.stlo 
    #     xx,yy = m(stlon,stlat)
    #     m.scatter(xx, yy, marker = "^" ,s=100, c="b" , edgecolors = "k", alpha = 1, label = "Data")
    #     if llcrnrlat < stlat < urcrnrlat and llcrnrlon < stlon < urcrnrlon:
    #         basin_st.append(tr.stats.sac.kstnm)


## for plotting syn stations - ignore because now using full grid
# if syn_exist == True:    
#     for tr in stream_syn:
#         for st in basin_st:
#             if tr.stats.sac.kstnm == st:
#                 stlat = tr.stats.sac.stla; stlon = tr.stats.sac.stlo 
#                 xx,yy = m(stlon,stlat)
#                 m.scatter(xx, yy, marker = "^" ,s=75, c="g" , edgecolors = "k", alpha = 1, label = "Graves Syn")
                
#Plot the event
for i in range(5):
    xx,yy = m(all_events[i][1],all_events[i][0])
    m.scatter(xx, yy, marker = "*" ,s=200, c="r" , edgecolors = "k", alpha = 1)    
for i in range(len(new_events)):
    xx,yy = m(new_events[i][1],new_events[i][0])
    m.scatter(xx, yy, marker = "*" ,s=200, c="m" , edgecolors = "k", alpha = 1) 

if syn_exist == True:
    plt.title("Stations used for Data v. Synthetic Comparison - " + event_disp)
if syn_exist == False:
    plt.title("Events and Stations used for Data v. Synthetic Comparison") #"" - " + event_disp)
plt.show()

fig_path = '/Users/bcbirkel/Documents/GitHub/LABasin/CompiledEvents/' + event + '/Figures/'
#savefig(fig_path + "Station map - " + event)


