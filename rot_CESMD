#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Sep 11 15:47:58 2020

@author: bcbirkel
"""

from obspy import read, read_inventory
from obspy.signal.filter import bandpass
import pandas as pd
from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt
import numpy as np
from obspy.signal.invsim import simulate_seismometer, corn_freq_2_paz
from obspy.geodetics import gps2dist_azimuth
from obspy.io.sac import sacpz
from obspy.io.sac import attach_paz
from obspy.io.gse2.paz import read_paz
import os
from obspy.core import Trace, Stream, AttribDict
from obspy.signal.rotate import rotate_ne_rt

#Ignore warnings due to python 2 and 3 conflict
import warnings
warnings.filterwarnings("ignore")


# %% Set parameters
#set event
for i in range(1,5):
    event_no = i
    events = ['lahabra_2014', 'beverlyhills_2001', 'chatsworth_2007', 'chinohills_2008', 'inglewood_2009']
    event = events[event_no]
    
    
    os.chdir('/Users/bcbirkel/Documents/GitHub/LABasin/CompiledEvents/' + event + '/CESMD/SAC/')
    # %% Set paths
    
    path_dir_CESMD = '/Users/bcbirkel/Documents/GitHub/LABasin/CompiledEvents/' + event + '/CESMD/SAC/'
    path_dir_syn = '/Users/bcbirkel/Documents/GitHub/LABasin/CompiledEvents/' + event + '/GravesSyn/'
    
    
    if event_no == 0:
        event_title = 'la_habra'
        event_lat = 33.9325
        event_lon = -117.9158
    elif event_no == 3:
        event_title = 'chino_hills'
        event_lat = 33.9465
        event_lon = -117.7667
    elif event_no == 4:
        event_title = 'inglewood'
        event_lat = 33.9377
        event_lon = -118.3357
    elif event_no == 2:
        event_title = 'chatsworth'
        event_lat = 34.2983
        event_lon = -118.6255
    elif event_no == 1:
        event_title = 'beverly_hills'
        event_lat = 34.0541
        event_lon = -118.3929
    else: 
        print('unknown event file')
    
    #read in files
    
    stream_cesmdN = read(path_dir_CESMD + "*N_vel.SAC")
    stream_cesmdE = read(path_dir_CESMD + "*E_vel.SAC")
    stream_synS = read(path_dir_syn + "CVM-S4/*.SAC")
    stream_synH = read(path_dir_syn + "CVM-H/*.SAC")
    
    # station lists
    
    # initialize stn list
    cesmd_stnsN = []
    cesmd_stnsE = []
    synS_stns = []
    synH_stns = []
    
    # populate lists
    for tr in stream_cesmdN:
        cesmd_stnsN.append(tr.stats.sac.kstnm)
        tr.stats.sac.evlo = event_lon
        tr.stats.sac.evla = event_lat
        tr.stats.channel = "BHN"
        
    for tr in stream_cesmdE:
        cesmd_stnsE.append(tr.stats.sac.kstnm)
        tr.stats.sac.evlo = event_lon
        tr.stats.sac.evla = event_lat
        tr.stats.channel = "BHE"
        
    for tr in stream_synS:
        synS_stns.append(tr.stats.station)
        
    for tr in stream_synH:
        synH_stns.append(tr.stats.station)
        
    # find intersection of stations
    
    #cesmd_stns = cesmd_stnsE.intersection(cesmd_stnsN)
    cesmd_st = set(cesmd_stnsN)
    
    synS_st = set(synS_stns)
    synH_st = set(synH_stns)
    
    stream_cesmd = stream_cesmdN + stream_cesmdE
    
    for st in cesmd_st:
        count = 0
        for tr in stream_cesmd:
            if st == tr.stats.sac.kstnm:
                dist_az = gps2dist_azimuth(tr.stats.sac.evla, tr.stats.sac.evlo, tr.stats.sac.stla, tr.stats.sac.stlo)
                dist = dist_az[0]
                az = dist_az[1]
                baz = dist_az[2]
                print("check")
                if tr.stats.channel == "BHN":
                    tn = tr
                    count += 1
                if tr.stats.channel == "BHE":
                    te = tr
                    count += 1
                if count == 2:
                    rotate_ne_rt(tn.data,te.data,baz)
                    tn.write(tr.stats.network + "_" + tr.stats.station + "_BHR_vel.SAC", format="SAC")
                    te.write(tr.stats.network + "_" + tr.stats.station + "_BHT_vel.SAC", format="SAC")
                    print("rotated!")
    
    # for stn in cesmd_st:
    #     st = Stream()
    #     for tr in stream_cesmd:
    #         [dist, az, baz] = gps2dist_azimuth(tr.stats.sac.evla,tr.stats.sac.evlo,tr.stats.sac.stla,tr.stats.sac.stlo)
    #         tr.stats.dist = dist
    #         tr.stats.az = az
    #         tr.stats.baz = baz
    #         if stn == tr.stats.station:
    #             st += tr
    #             if len(st) == 3:        
    #                 st.rotate('NE->RT', back_azimuth=baz)
                    #tr.write("processed_" + tr.stats.network + '.' + tr.stats.station + '.' + tr.stats.channel + ".SAC", format="SAC") 
    
    
    #for tr in stream_synS:
        #print(tr.stats.sac.stla)
    #for tr in stream_synH:
        #print(tr.stats.sac.stla)
        
        
    # for ii in range(len(st_name)):
    #     st = st_name[ii]
    #     for tn in stream_N:
    #         for te in stream_E:
    #             if tn.stats.station == st and te.stats.station == st:
    #                 baz = st_baz[ii]
    #                 rotate_ne_rt(tn.data,te.data,baz)
    #                 tn.write(tr.id + "R.SAC", format="SAC")
    #                 te.write(tr.id + "T.SAC", format="SAC")